version: "2.3"

# Ubuntu , set this for redpanda to start
# https://sort.veritas.com/public/documents/HSO/2.0/linux/productguides/html/hfo_admin_ubuntu/ch04s03.htm

# Clickhouse Table Schema
# create table test(id int, message String) ENGINE=MergeTree() PRIMARY KEY id;

services:




  schemaregistry:
    container_name: schemaregistry
    image: apicurio/apicurio-registry-mem:2.0.0.Final
    #image: confluentinc/cp-schema-registry:latest
    restart: "no"
    ports:
      - "8080:8080"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    #    environment:
    #      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=kafka:9092
    #      - SCHEMA_REGISTRY_HOST_NAME=localhost
    #      - SCHEMA_REGISTRY_LISTENERS=http://localhost:8081
    #      - SCHEMA_REGISTRY_DEBUG=true

    depends_on:
      - kafka



  kafka:
    container_name: kafka
    image: vectorized/redpanda
    restart: "no"
    #    ports:
    #      - "8081:8081"
    #      - "8082:8082"
    #      - "9091:9091"
    #      - "9092:9092"
    ports:
      # Expose LOCALHOST_NETWORK listener on localhost
      - "19092:19092"
    command:
      - redpanda
      - start
      - --overprovisioned
      # Setup listeners for docker network and localhost network
      - --kafka-addr
      - DOCKER_NETWORK://0.0.0.0:9092,LOCALHOST_NETWORK://0.0.0.0:19092
      - --advertise-kafka-addr
      - DOCKER_NETWORK://kafka:9092,LOCALHOST_NETWORK://127.0.0.1:19092
#    volumes:
#      - test:/
  #  kafka2:
  #    container_name: kafka2
  #    image: vectorized/redpanda
  #    restart: always

  kafka-connect:
    image: confluentinc/cp-kafka-connect-base:5.5.0
    container_name: kafka-connect
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:29092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components/'
      #
      # Make sure you set this for the correct path that the library files for InstantClient have been installed into
      LD_LIBRARY_PATH: '/usr/share/java/debezium-connector-oracle/instantclient_19_6/'
    command:
      - bash
      - -c
      - |
        echo "Installing connector plugins"
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:5.5.0
        confluent-hub install --no-prompt confluentinc/kafka-connect-datagen:0.3.2
        #
        echo "Downloading JDBC drivers"
        cd /usr/share/confluent-hub-components/confluentinc-kafka-connect-jdbc/lib
        curl https://maven.xwiki.org/externals/com/oracle/jdbc/ojdbc8/12.2.0.1/ojdbc8-12.2.0.1.jar -o ojdbc8-12.2.0.1.jar
        # -----------
        # Install Debezium Oracle connector and required libraries
        # -- Download
        curl "https://oss.sonatype.org/service/local/repositories/snapshots/content/io/debezium/debezium-connector-oracle/1.2.0-SNAPSHOT/debezium-connector-oracle-1.2.0-20200612.041347-34-plugin.tar.gz" | \
          tar xvfz - --directory /usr/share/java/
        # -- Install the required library files
        apt-get update
        apt-get install -y --force-yes unzip libaio1
        wget "https://download.oracle.com/otn_software/linux/instantclient/19600/instantclient-basiclite-linux.x64-19.6.0.0.0dbru.zip" -O /tmp/ic.zip
        unzip /tmp/ic.zip -d /usr/share/java/debezium-connector-oracle/
        # -----------
        # Launch the Kafka Connect worker
        /etc/confluent/docker/run &
        #
        # Don't exit
        sleep infinity
    depends_on:
      - kafka

  # Other systems
  oracle:
    # You need to build this image first, following the instructions at
    # https://github.com/oracle/docker-images/blob/master/OracleDatabase/SingleInstance/README.md
    #
    # NB: There's no sudo on the image but you can run stuff as root using
    # docker exec -it -u root oracle <cmd>
    # e.g.: docker exec -it -u root oracle bash -c "rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm &&  yum install -y rlwrap"
    image: oracle/database:12.2.0.1-ee
    container_name: oracle
    environment:
      - ORACLE_PWD=Admin123
    ports:
      - 1521:1521
#    volumes:
#      - $PWD/oradata:/opt/oracle/oradata
#      - $PWD/oradata/recovery_area:/opt/oracle/oradata/recovery_area
#      - $PWD/ora-setup-scripts:/opt/oracle/scripts/setup
#      - $PWD/ora-startup-scripts:/opt/oracle/scripts/startup
#      -
  sink:
    container_name: sink
    image: altinity/clickhouse-kafka-sink-connector-on-debezium-base:latest
    restart: "no"
    ports:
      - "18083:8083"
      - "5005:5005"
      - "39999:39999"
    environment:
      # Where to find Kafka broker
      - BOOTSTRAP_SERVERS=kafka:9092
      # Maps to rest.advertised.host.name
      #- ADVERTISED_HOST_NAME=kafka
      # Maps to rest.advertised.port
      #- ADVERTISED_PORT=9092
      - GROUP_ID=2
      - CONFIG_STORAGE_TOPIC=config-storage-topic-sink
      - OFFSET_STORAGE_TOPIC=offset-storage-topic-sink
      - STATUS_STORAGE_TOPIC=status-storage-topic-sink
      - LOG_LEVEL=INFO
      - JAVA_DEBUG_PORT=*:5005
      - DEFAULT_JAVA_DEBUG_PORT=*:5005
      - KAFKA_DEBUG=true
      - JMX_PORT=39999
      #- LOG_LEVEL=DEBUG
    depends_on:
      - kafka

  clickhouse:
    # clickhouse-client --host=127.0.0.1 --port=9000 --user=root --password=root --database=test
    container_name: clickhouse
    image: clickhouse/clickhouse-server:latest
    restart: "no"
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      - CLICKHOUSE_USER=root
      - CLICKHOUSE_PASSWORD=root
      - CLICKHOUSE_DB=test
    ulimits:
      nofile:
        soft: "262144"
        hard: "262144"
    volumes:
      - ../sql/init_clickhouse.sql:/docker-entrypoint-initdb.d/init_clickhouse.sql

  ##### MONITORING #####
  #https://stackoverflow.com/questions/55473562/configuring-a-jmx-prometheus-exporter-docker-container-to-read-jmx-local-applica
  # Bitnami bitnami/jmx-exporter vs sscaling images
  jmx_exporter:
    container_name: jmx_exporter
    image: sscaling/jmx-prometheus-exporter
    restart: "no"
    ports:
      - "9072:9072"
    environment:
      SERVICE_PORT: 9072
    volumes:
      - ../config/jmx-config.yml:/opt/jmx_exporter/config.yml

  blackbox_exporter:
    container_name: blackbox_exporter
    image: prom/blackbox-exporter:master
    restart: "no"
    ports:
      - "9115:9115"

  prometheus:
    container_name: prometheus
    image: bitnami/prometheus
    restart: "no"
    ports:
      - "9090:9090"
    volumes:
      - ../config/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml

  grafana:
    container_name: grafana
    image: grafana/grafana
    restart: "no"
    volumes:
      - ../config/grafana/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3000:3000"

  #### END OF MONITORING ###

  bash:
    container_name: bash
    image: ubuntu
    restart: "no"
    entrypoint:
      - /bin/sleep
    command:
      - infinity
